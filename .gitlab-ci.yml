# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
    IMAGE_NAME: faco400/gces_pipeline
    IMAGE_TAG_FRONT: gces-app-front-1.0
    IMAGE_TAG_BACK: gces-app-back-1.0
    POSTGRES_DB: library_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_HOST: db
    POSTGRES_PORT: 5432

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - lint
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: tmaier/docker-compose:latest
  services:
    - docker:20.10.16-dind
  before_script:
    - docker info
    - docker-compose --version
    - docker login -u ${REGISTRY_USER//0}00 -p $REGISTRY_PASS
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker-compose down
    - docker-compose build
  
test-job:
  stage: test
  image: docker:latest

  services:
  - docker:dind

  before_script:
  - apk add --update python py-pip python-dev && pip install docker-compose # install docker-compose
  - docker version
  - docker-compose version

  script:
  - docker-compose down
  - docker-compose up -d db
  - docker-compose up -d web
  - docker-compose up -d front
  - docker exec web_container python3 manage.py makemigrations
  - docker exec web_container python3 manage.py migrate --fake
  - docker exec web_container python3 manage.py test
  - docker exec web_container npm test

lint-job:   # This job also runs in the test stage.
  stage: lint    # It can run at the same time as unit-test-job (in parallel).
  image: nikolaik/python-nodejs:python3.9-nodejs18-slim
  before_script:
    - pip install pylint
    - pip install --upgrade autopep8
    - npm install library_front/
    - npm install --save-dev eslint-config-react-app eslint@^8.0.0
    - apt-get update
    - apt-get -y install libpq-dev gcc
    - pip install -r ./library_back/requirements.txt
  script:
    - autopep8 --in-place -r library_back/
    - pylint library_back/ --disable=C0103,C0114,C0115,C0116,C0411,C0412,C0415,W0611,W0613,E1101,R0903,R0901
    - cd ./library_front/
    - npx eslint --fix --quiet


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - docker login -u ${REGISTRY_USER//0}00 -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG_FRONT ./library_front
    - docker build -t $IMAGE_NAME:$IMAGE_TAG_BACK ./library_back
    - docker push $IMAGE_NAME:$IMAGE_TAG_FRONT
    - docker push $IMAGE_NAME:$IMAGE_TAG_BACK
